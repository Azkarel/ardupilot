# hw definition file for processing by chibios_hwdef.py
# for the AZKAREL hardware

# MCU class and specific type
MCU STM32H7xx STM32H743xx

# crystal frequency
OSCILLATOR_HZ 25000000

# board ID for firmware load
APJ_BOARD_ID 666

# flash size
FLASH_SIZE_KB 2048

# bootloader takes first sector
FLASH_RESERVE_START_KB 128

# the location where the bootloader will put the firmware
# the H743 has 128k sectors
FLASH_BOOTLOADER_LOAD_KB 128

# use last 2 pages for flash storage
# H757 has 16 pages of 128k each
STORAGE_FLASH_PAGE 14
define HAL_STORAGE_SIZE 32768

EXT_FLASH_SIZE_MB 8
INT_FLASH_PRIMARY 1

# EXT_FLASH_RESERVE_START_KB 4096
# EXT_FLASH_RESERVE_END_KB 0

# with 2M flash we can afford to optimize for speed
env OPTIMIZE -O2

# ChibiOS system timer
STM32_ST_USE_TIMER 5

#-------------------------------------------------------------------------------

# order of UARTs (and USB)
SERIAL_ORDER OTG1 USART1 USART2 USART3 UART5 UART8 UART7 OTG2

# now we define the pins that USB is connected on
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1

# USART1 TELEM1
PA9  USART1_TX USART1
PA10 USART1_RX USART1

# USART2 TELEM2
PA0  USART2_CTS_NSS USART2
PD4  USART2_RTS USART2
PD5  USART2_TX USART2
PD6  USART2_RX USART2

# USART3 GPS
PD8  USART3_TX USART3 NODMA
PD9  USART3_RX USART3 NODMA

# UART5 GPS2
PB12 UART5_RX UART5 NODMA
PB13 UART5_TX UART5 NODMA

# SBUS, DSM port
PE0  UART8_RX UART8
PE1  UART8_TX UART8

# UART7 DEBUG
PE7  UART7_RX UART7 NODMA
PE8  UART7_TX UART7 NODMA

# these are the pins for SWD debugging with a STlinkv2 or black-magic probe
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

#-------------------------------------------------------------------------------

# SPI1 -IMU1 -COMPASS
PA5  SPI1_SCK SPI1
PA6  SPI1_MISO SPI1
PA7  SPI1_MOSI SPI1

# SPI2 -IMU2 -IMU3
PD3  SPI2_SCK SPI2
PC2  SPI2_MISO SPI2
PB15 SPI2_MOSI SPI2

# SPI4 -FRAM -BAROMETER
PE12 SPI4_SCK SPI4
PE5  SPI4_MISO SPI4
PE6  SPI4_MOSI SPI4

# sensors cs
PE10 IMU1_CS CS
PE9  BAROMETER1_CS CS
PC13 IMU2_CS CS
PE4  BAROMETER2_CS CS
# PB9  FRAM_CS CS
PB5  COMPASS_CS CS
PD7  RESERVE_CS CS

# Extra SPI CS
PB4  EXT_CS CS

#-------------------------------------------------------------------------------

# order of I2C buses
I2C_ORDER I2C2 I2C4

# I2C buses
PB10 I2C2_SCL I2C2
PB11 I2C2_SDA I2C2

PB8  I2C4_SCL I2C4
PB7  I2C4_SDA I2C4

NODMA I2C*
define STM32_I2C_USE_DMA FALSE
define HAL_I2C_INTERNAL_MASK 0

#-------------------------------------------------------------------------------

# CAN bus
PD0  CAN1_RX CAN1
PD1  CAN1_TX CAN1

#-------------------------------------------------------------------------------

# PWM channels
PA8  TIM1_CH1  TIM1 PWM(1)  GPIO(50)    BIDIR
PE11 TIM1_CH2  TIM1 PWM(2)  GPIO(51)
PE13 TIM1_CH3  TIM1 PWM(3)  GPIO(52)    BIDIR
PE14 TIM1_CH4  TIM1 PWM(4)  GPIO(53)
PA15 TIM2_CH1  TIM2 PWM(5)  GPIO(54)    BIDIR
PB3  TIM2_CH2  TIM2 PWM(6)  GPIO(55)
PA2  TIM2_CH3  TIM2 PWM(7)  GPIO(56)    BIDIR
PA3  TIM2_CH4  TIM2 PWM(8)  GPIO(57)

# RC input
PC7  TIM8_CH2 TIM8 RCININT PULLUP LOW

# PWM output for buzzer
PB14 TIM12_CH1 TIM12 GPIO(77) ALARM

#-------------------------------------------------------------------------------

# Analog in
PC0  BATT_CURRENT_SENS ADC1 SCALE(1)
PC1  BATT_VOLTAGE_SENS ADC1 SCALE(1)

PC4  VDD_5V_SENS ADC1 SCALE(2)
PA4  RSSI_IN ADC1 SCALE(1)

# ADC3.3/ADC6.6
PB0  SPARE1_ADC1 ADC1 SCALE(2)
PB1  SPARE2_ADC1 ADC1 SCALE(1)

#------------------------------------------------------------------------------

# GPIOs
PD10 HEATER_EN OUTPUT LOW GPIO(80)
define HAL_HEATER_GPIO_PIN 80
define HAL_HAVE_IMU_HEATER 1

# enable pins
PE15  VDD_3V3_SENSORS_EN OUTPUT LOW

# TriColor LED, Red, Green, Blue
define AP_NOTIFY_GPIO_LED_RGB_ENABLED 1

# LED setup
PD15 LED_R OUTPUT OPENDRAIN HIGH GPIO(0)
PD14 LED_G OUTPUT OPENDRAIN HIGH GPIO(1)
PC6  LED_B OUTPUT OPENDRAIN HIGH GPIO(2)

define AP_NOTIFY_GPIO_LED_RGB_RED_PIN 0
define AP_NOTIFY_GPIO_LED_RGB_GREEN_PIN 1
define AP_NOTIFY_GPIO_LED_RGB_BLUE_PIN 2

# allow to have have a dedicated safety switch pin
define HAL_HAVE_SAFETY_SWITCH 1
PA1  LED_SAFETY OUTPUT
PC3  SAFETY_IN INPUT PULLDOWN

#-------------------------------------------------------------------------------

# SPI devices
SPIDEV mpu9250      SPI1 DEVID1  IMU1_CS         MODE3  2*MHZ   4*MHZ
SPIDEV icm20948     SPI2 DEVID1  IMU2_CS         MODE3  4*MHZ   8*MHZ
SPIDEV bmp280       SPI1 DEVID2  BAROMETER1_CS   MODE3  1*MHZ   8*MHZ
SPIDEV bmp388       SPI2 DEVID1  BAROMETER2_CS   MODE3  5*MHZ  10*MHZ

# IMU1
IMU     Invensense SPI:mpu9250 ROTATION_PITCH_180
COMPASS AK8963:probe_mpu9250 1 ROTATION_YAW_270

# IMU2
IMU     Invensensev2 SPI:icm20948 ROTATION_YAW_270
COMPASS AK09916:probe_ICM20948 0 ROTATION_ROLL_180_YAW_90

define HAL_DEFAULT_INS_FAST_SAMPLE 5

# baro bmp280 or bmp388
BARO    BMP280 SPI:bmp280
BARO    BMP388 SPI:bmp388

#-------------------------------------------------------------------------------

# QuadSPI Flash
PD11 QUADSPI_BK1_IO0 QUADSPI1 SPEED_HIGH
PD12 QUADSPI_BK1_IO1 QUADSPI1 SPEED_HIGH
PE2  QUADSPI_BK1_IO2 QUADSPI1 SPEED_HIGH
PD13 QUADSPI_BK1_IO3 QUADSPI1 SPEED_HIGH
PB6  QUADSPI_BK1_NCS QUADSPI1 SPEED_HIGH
PB2  QUADSPI_CLK     QUADSPI1 SPEED_HIGH

# microSD support
PC8  SDMMC1_D0 SDMMC1
PC9  SDMMC1_D1 SDMMC1
PC10 SDMMC1_D2 SDMMC1
PC11 SDMMC1_D3 SDMMC1
PC12 SDMMC1_CK SDMMC1
PD2  SDMMC1_CMD SDMMC1

# enable FAT filesystem support (needs a microSD defined via SDMMC)
define HAL_OS_FATFS_IO 1

# enable RAMTROM parameter storage
# define HAL_STORAGE_SIZE 32768
# define HAL_WITH_RAMTRON 1

DMA_PRIORITY  SPI1* SPI2* TIM*UP*
DMA_NOSHARE  SPI1* SPI2* TIM*UP*
